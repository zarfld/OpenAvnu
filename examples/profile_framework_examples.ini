# OpenAvnu Profile Framework Configuration Examples
#
# This file demonstrates how the profile framework enables different
# IEEE 1722 specifications and profiles through configuration without
# requiring code changes.

# =============================================================================
# Example 1: Basic AVB Configuration (IEEE 1722-2016)
# =============================================================================

[profile]
# Select AVB profile for basic IEEE 1722-2016 compliance
profile_name = AVB

[stream]
role = talker
dest_addr = 91:E0:F0:00:FE:01
max_transit_usec = 2000
sr_class = A
sr_rank = 1
max_interval_frames = 1
# AVB allows flexible configuration

[intf]
intf_nv_intf_name = alsa_pcm_hw:0,0
intf_nv_audio_rate = 48000
intf_nv_audio_bit_depth = 16
intf_nv_audio_channels = 2

[map]
map_nv_item_count = 20
map_nv_tx_rate = 8000
map_nv_packing_factor = 48

# =============================================================================
# Example 2: MILAN Configuration (IEEE 1722.1-2021)
# =============================================================================

[profile]
# Select MILAN profile for strict IEEE 1722.1-2021 compliance
profile_name = MILAN

[stream]
role = listener
dest_addr = 91:E0:F0:00:FE:01
max_transit_usec = 2000
sr_class = A
# MILAN profile automatically enforces:
# - AVDECC requirement (mandatory)
# - Fast connect requirement (mandatory)
# - AVTP timestamp requirement (mandatory)
# - Strict quality monitoring

[avdecc]
# MILAN requires AVDECC - profile validates this is enabled
enabled = 1
fast_connect = 1
entity_model_id = 0x001b92fffe000001

[intf]
intf_nv_intf_name = alsa_pcm_hw:0,0
intf_nv_audio_rate = 48000    # MILAN validates supported rates
intf_nv_audio_bit_depth = 24  # MILAN specific bit depth requirements
intf_nv_audio_channels = 8
intf_nv_fixed_timestamp = 1   # Required by MILAN profile

[map]
map_nv_item_count = 20
map_nv_tx_rate = 8000
map_nv_packing_factor = 48
map_nv_audio_mcr = 1          # Required by MILAN profile

# =============================================================================
# Example 3: Automotive Configuration
# =============================================================================

[profile]
# Select Automotive profile for safety-critical applications
profile_name = Automotive

[stream]
role = talker
dest_addr = 91:E0:F0:00:FE:01
max_transit_usec = 500        # Automotive profile enforces stricter timing
sr_class = A
redundancy = 1                # Automotive profile recommends redundancy

[avdecc]
# Automotive requires AVDECC for device management
enabled = 1
fast_connect = 1
entity_model_id = 0x001b92fffe000002

[security]
# Automotive profile requires security features
enabled = 1
encryption = 1
authentication = 1
crypto_suite = AES-256-GCM

[intf]
intf_nv_intf_name = alsa_pcm_hw:0,0
intf_nv_audio_rate = 48000
intf_nv_audio_bit_depth = 16
intf_nv_audio_channels = 2
intf_nv_clock_skew_ppb = 10   # Automotive requires tight clock sync

[map]
map_nv_item_count = 10        # Smaller buffers for low latency
map_nv_tx_rate = 8000
map_nv_packing_factor = 24    # Reduced for lower latency
map_nv_audio_mcr = 1

# =============================================================================
# Example 4: Custom Profile Configuration
# =============================================================================

[profile]
# Custom profile for specialized applications
profile_name = LowLatency
# Custom profiles can be loaded from separate files or defined in code

[profile_overrides]
# Allow overriding specific profile parameters if supported
max_transit_time_ns = 250000  # Override default transit time
sync_uncertainty_ns = 25      # Tighter sync than standard

[stream]
role = talker
dest_addr = 91:E0:F0:00:FE:01
max_transit_usec = 250        # Profile validates this is within limits
sr_class = A

# =============================================================================
# Example 5: Profile Inheritance Configuration
# =============================================================================

[profile]
# Profile that inherits from MILAN but adds custom requirements
profile_name = CustomMILAN
parent_profile = MILAN

[profile_overrides]
# Customize inherited profile
require_redundancy = 1        # Add redundancy to MILAN requirements
max_frame_size = 1000         # Smaller frames than standard MILAN

# =============================================================================
# Example 6: Multi-Stream Configuration with Different Profiles
# =============================================================================

# Stream 1: Audio with MILAN profile
[stream_audio]
profile_name = MILAN
role = talker
dest_addr = 91:E0:F0:00:FE:01
stream_uid = 1

[intf_audio]
intf_nv_intf_name = alsa_pcm_hw:0,0
intf_nv_audio_rate = 48000

[map_audio]
map_nv_format = aaf           # MILAN prefers AAF

# Stream 2: Control with Automotive profile  
[stream_control]
profile_name = Automotive
role = listener
dest_addr = 91:E0:F0:00:FE:02
stream_uid = 2

[intf_control]
intf_nv_intf_name = ctrl

[map_control] 
map_nv_format = ctrl

# =============================================================================
# Example 7: Development vs Production Profiles
# =============================================================================

[profile]
# Development profile - relaxed requirements for testing
# profile_name = AVB
# Production profile - strict requirements
profile_name = MILAN

[development_overrides]
# Only applied when AVB profile is active
allow_packet_loss = 1
relaxed_timing = 1

[production_requirements]
# Only applied when MILAN profile is active
zero_packet_loss = 1
strict_timing = 1
mandatory_avdecc = 1

# =============================================================================
# Profile Framework Benefits Demonstrated:
# =============================================================================

# 1. CENTRALIZED CONFIGURATION:
#    - All profile-specific requirements in one place
#    - No scattered switches throughout the codebase
#    - Clear separation between profile logic and transport logic

# 2. BACKWARD COMPATIBILITY:
#    - Existing configurations work with AVB profile (default)
#    - No changes required to existing .ini files
#    - Gradual migration path to new profiles

# 3. FUTURE-PROOF:
#    - New profiles added without code changes
#    - IEEE spec evolution handled through profile updates
#    - Custom profiles for specialized applications

# 4. VALIDATION AT CONFIGURATION TIME:
#    - Profile requirements validated during configuration parsing
#    - Early detection of incompatible settings
#    - Clear error messages referencing profile requirements

# 5. CONSISTENT BEHAVIOR:
#    - Profile requirements enforced systematically
#    - Same validation logic across all components
#    - No possibility of inconsistent profile implementation

# 6. EASY TESTING:
#    - Profile-specific test configurations
#    - Isolated testing of profile requirements
#    - Clear test matrix for different profiles

# =============================================================================
# Advanced Profile Features
# =============================================================================

[profile]
profile_name = MILAN

[profile_validation]
# Enable strict profile compliance checking
strict_validation = 1
fail_on_warnings = 1
log_compliance_issues = 1

[profile_metrics]
# Enable profile-specific quality metrics
quality_monitoring = 1
compliance_reporting = 1
metrics_interval_sec = 10

[profile_fallback]
# Define fallback behavior if profile requirements can't be met
fallback_profile = AVB
allow_fallback = 1
fallback_warning = 1

# This configuration framework provides a clean, extensible way to handle
# different IEEE 1722 specifications and profiles without hardcoded switches,
# enabling future-proof development and easy maintenance.
