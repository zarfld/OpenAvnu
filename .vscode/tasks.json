{
	"version": "2.0.0",
	// OpenAvnu Integration Tasks:
	// 
	// gPTP Integration Tasks:
	// - Apply gPTP Windows Build Fix: [LEGACY] Fixes config file path issues in gPTP CMakeLists.txt (now fixed in submodule)
	// - Run gPTP Daemon (Windows/Linux): Starts gPTP daemon in background
	// - Verify gPTP Integration: Runs verification script to check integration
	// - Build gPTP Only: Builds just the gPTP target
	// - CMake Configure with gPTP: Configures build with gPTP explicitly enabled
	//
	// L-Acoustics AVDECC Integration Tasks:
	// - CMake Configure with L-Acoustics AVDECC: Configures build with both gPTP and L-Acoustics AVDECC
	// - Build L-Acoustics AVDECC Only: Builds just the L-Acoustics AVDECC target
	// - Run L-Acoustics AVDECC Integration Example: Executes the integration example application
	// - Open L-Acoustics AVDECC Documentation: Opens relevant documentation files
	// - Install WinPCAP Developer Pack: Shows installation instructions for Windows dependencies
	"tasks": [
		{
			"label": "Build All (Windows - CMake)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build All (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"all"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Install WSL Ubuntu (Required for Linux builds)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"--install",
				"-d",
				"Ubuntu"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "new"
			}
		},
		{
			"label": "Clean All (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"clean"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Clean All (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"clean"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "CMake Configure (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"..",
				"-G",
				"Visual Studio 17 2022"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Create Build Directory"
		},
		{
			"label": "CMake Configure (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"..",
				"-G",
				"Unix Makefiles"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "Create Build Directory"
		},
		{
			"label": "CMake Build (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "CMake Build (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Linux/WSL)"
		},
		{
			"label": "CMake Test (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"RUN_TESTS"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Build (Windows)"
		},
		{
			"label": "CMake Test (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"test"
			],
			"options": {
				"cwd": "${workspaceFolder}/build",
				"env": {
					"ARGS": "--output-on-failure"
				}
			},
			"group": "test",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Build (Linux/WSL)"
		},
		{
			"label": "Build Daemons (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"daemons_all"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build Examples (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"examples_all"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build AVTP Pipeline (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"avtp_pipeline"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build AVTP AVDECC (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"avtp_avdecc"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build Libraries (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"lib"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build ATL Library (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"atl_lib"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build Simple Talker (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"simple_talker"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build Simple Listener (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"simple_listener"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build MRP Client (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"mrp_client"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Create Build Directory",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"if (!(Test-Path 'build')) { New-Item -ItemType Directory -Path 'build' }"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Generate AVTP Pipeline Documentation (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"avtp_pipeline_doc"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Generate AVTP AVDECC Documentation (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"avtp_avdecc_doc"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Initialize Git Submodules",
			"type": "shell",
			"command": "git",
			"args": [
				"submodule",
				"update",
				"--init",
				"--recursive"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Build All Debug (Windows - CMake)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build All RelWithDebInfo (Windows - CMake)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"RelWithDebInfo"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Build Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "CMake Build RelWithDebInfo (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"RelWithDebInfo"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Clean Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"clean"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Clean RelWithDebInfo (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"RelWithDebInfo",
				"--target",
				"clean"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "CMake Test Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"RUN_TESTS"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Build Debug (Windows)"
		},
		{
			"label": "CMake Test RelWithDebInfo (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"RelWithDebInfo",
				"--target",
				"RUN_TESTS"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Build RelWithDebInfo (Windows)"
		},
		{
			"label": "Build MAAP Daemon Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_daemon"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Build MRPD Daemon Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"mrpd"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Build CppUTest Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"CppUTest"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Run CppUTest Tests Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"CppUTestTests"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "Build CppUTest Debug (Windows)"
		},
		{
			"label": "Build and Run MRPD Simple Test Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"mrpd_simple_test"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Build MAAP Test Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_test"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Run Intel HAL Validation Test (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"intel_hal_validation_test"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run Intel HAL Validation Test (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"--build",
				".",
				"--target",
				"intel_hal_validation_test"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Test Modernized Windows Code",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_daemon"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Apply gPTP Windows Build Fix [LEGACY]",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '✅ gPTP Windows build fix is no longer needed!' -ForegroundColor Green; Write-Host 'The fix has been applied to the gPTP submodule and committed.' -ForegroundColor Yellow; Write-Host 'This task is kept for reference only.' -ForegroundColor Gray"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Run gPTP Daemon (Windows)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				"run_gptp.ps1"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": true,
			"dependsOn": "Build All (Windows - CMake)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "dedicated"
			}
		},
		{
			"label": "Run gPTP Daemon (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"bash",
				"run_gptp.sh"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": true,
			"dependsOn": "Build All (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "dedicated"
			}
		},
		{
			"label": "Verify gPTP Integration",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				"verify_gptp_integration.ps1"
			],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Build gPTP Only (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"gptp2"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build gPTP Only (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"--build",
				".",
				"--target",
				"gptp2"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with gPTP (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"..",
				"-G",
				"Visual Studio 17 2022",
				"-DOPENAVNU_BUILD_GPTP=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with gPTP (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"..",
				"-G",
				"Unix Makefiles",
				"-DOPENAVNU_BUILD_GPTP=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Open gPTP Documentation",
			"type": "shell",
			"command": "code",
			"args": [
				"docs/gPTP_Integration.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Open gPTP Windows Build Fix Guide",
			"type": "shell",
			"command": "code",
			"args": [
				"gptp_windows_build_fix.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Test Modernized Windows Code",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_daemon"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with L-Acoustics AVDECC (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"..",
				"-G",
				"Visual Studio 17 2022",
				"-DOPENAVNU_BUILD_LA_AVDECC=ON",
				"-DOPENAVNU_BUILD_GPTP=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with L-Acoustics AVDECC (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"..",
				"-G",
				"Unix Makefiles",
				"-DOPENAVNU_BUILD_LA_AVDECC=ON",
				"-DOPENAVNU_BUILD_GPTP=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build L-Acoustics AVDECC Only (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"la_avdecc_cxx"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure with L-Acoustics AVDECC (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build L-Acoustics AVDECC Only (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"--build",
				".",
				"--target",
				"la_avdecc_cxx"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure with L-Acoustics AVDECC (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Run L-Acoustics AVDECC Integration Example (Windows)",
			"type": "shell",
			"command": ".\\build\\examples\\Release\\la_avdecc_integration_example.exe",
			"args": [],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Build All (Windows - CMake)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run L-Acoustics AVDECC Integration Example (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"./build/examples/la_avdecc_integration_example"
			],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Build All (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Open L-Acoustics AVDECC Integration Status",
			"type": "shell",
			"command": "code",
			"args": [
				"LA_AVDECC_INTEGRATION_STATUS.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Open L-Acoustics AVDECC Integration Plan",
			"type": "shell",
			"command": "code",
			"args": [
				"LA_AVDECC_SUBMODULE_INTEGRATION_PLAN.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Open AVDECC Compatibility Assessment",
			"type": "shell",
			"command": "code",
			"args": [
				"AVDECC_COMPATIBILITY_ASSESSMENT.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Install Npcap SDK (Windows - Recommended)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '📦 Modern Npcap SDK Installation (Recommended for Windows 10/11)' -ForegroundColor Green; Write-Host ''; Write-Host '1. Download Npcap SDK 1.13:' -ForegroundColor White; Write-Host '   https://npcap.com/dist/npcap-sdk-1.13.zip' -ForegroundColor Cyan; Write-Host ''; Write-Host '2. Extract to a folder (e.g., C:\\\\npcap-sdk)' -ForegroundColor White; Write-Host ''; Write-Host '3. Set environment variable:' -ForegroundColor White; Write-Host '   $env:NPCAP_DIR=\\\"C:\\\\npcap-sdk\\\"' -ForegroundColor Cyan; Write-Host '   OR $env:NPCAP_SDK_DIR=\\\"C:\\\\npcap-sdk\\\"' -ForegroundColor Cyan; Write-Host ''; Write-Host '4. Restart VS Code and run CMake configuration' -ForegroundColor White; Write-Host ''; Write-Host 'Benefits: Modern, actively maintained, Windows 10/11 optimized' -ForegroundColor Green; Write-Host 'OpenAvnu will automatically detect and configure PCAP for all components' -ForegroundColor Green"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Install WinPCAP Developer Pack (Windows - Legacy Fallback)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '⚠️  Legacy WinPCAP Developer Pack Installation (Fallback Only)' -ForegroundColor Yellow; Write-Host ''; Write-Host 'NOTE: WinPcap is deprecated. Use Npcap instead for modern Windows.' -ForegroundColor Red; Write-Host ''; Write-Host '1. Download WinPCAP Developer Pack 4.1.2:' -ForegroundColor White; Write-Host '   https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip' -ForegroundColor Cyan; Write-Host ''; Write-Host '2. Extract to a folder (e.g., C:\\\\WpdPack)' -ForegroundColor White; Write-Host ''; Write-Host '3. Set environment variable:' -ForegroundColor White; Write-Host '   $env:WPCAP_DIR=\\\"C:\\\\WpdPack\\\"' -ForegroundColor Cyan; Write-Host ''; Write-Host '4. Restart VS Code and run CMake configuration' -ForegroundColor White; Write-Host ''; Write-Host 'OpenAvnu will automatically create compatibility layer' -ForegroundColor Yellow"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Test Modernized Windows Code",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_daemon"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Build Clock Quality Tests (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"clock_quality_tests"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Run Clock Quality Tests (Windows)",
			"type": "shell",
			"command": ".\\test\\clock_quality\\Release\\clock_quality_tests.exe",
			"args": [],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": "Build Clock Quality Tests (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Build and Run Clock Quality Tests (Windows)",
			"type": "shell",
			"command": ".\\test\\clock_quality\\Release\\clock_quality_tests.exe",
			"args": [],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": "Build Clock Quality Tests (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run All OpenAvnu Tests (Windows)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '🧪 Running comprehensive OpenAvnu test suite...' -ForegroundColor Green; Write-Host ''; & '.\\tests\\intel_hal\\Release\\intel_hal_validation_test.exe'; Write-Host ''; & '.\\test\\clock_quality\\Release\\clock_quality_tests.exe'; Write-Host ''; Write-Host '✅ All OpenAvnu tests completed!' -ForegroundColor Green"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": [
				"Build All (Windows - CMake)"
			],
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Build Unified Testing Framework (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Run Clock Quality Tests (Consolidated)",
			"type": "shell",
			"command": "./testing/conformance/avnu_alliance/gptp/clock_quality/Release/clock_quality_tests_consolidated.exe",
			"args": [],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": "Build Unified Testing Framework (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run Intel HAL Tests (Consolidated)",
			"type": "shell",
			"command": "./tests/intel_hal_validation_test_consolidated.exe",
			"args": [],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": "Build Unified Testing Framework (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run CTest Conformance Tests",
			"type": "shell",
			"command": "ctest",
			"args": [
				"-L",
				"conformance",
				"--output-on-failure"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": "Build Unified Testing Framework (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run CTest Hardware Tests",
			"type": "shell",
			"command": "ctest",
			"args": [
				"-L",
				"hardware",
				"--output-on-failure"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": "Build Unified Testing Framework (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with Unified Testing (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"..",
				"-G",
				"Visual Studio 17 2022",
				"-DOPENAVNU_BUILD_UNIFIED_TESTING=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		}
	]
}
