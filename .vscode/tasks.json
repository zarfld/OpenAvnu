{
	"version": "2.0.0",
	// OpenAvnu Integration Tasks:
	// 
	// gPTP Integration Tasks:
	// - Apply gPTP Windows Build Fix: [LEGACY] Fixes config file path issues in gPTP CMakeLists.txt (now fixed in submodule)
	// - Run gPTP Daemon (Windows/Linux): Starts gPTP daemon in background
	// - Verify gPTP Integration: Runs verification script to check integration
	// - Build gPTP Only: Builds just the gPTP target
	// - CMake Configure with gPTP: Configures build with gPTP explicitly enabled
	//
	// L-Acoustics AVDECC Integration Tasks:
	// - CMake Configure with L-Acoustics AVDECC: Configures build with both gPTP and L-Acoustics AVDECC
	// - Build L-Acoustics AVDECC Only: Builds just the L-Acoustics AVDECC target
	// - Run L-Acoustics AVDECC Integration Example: Executes the integration example application
	// - Open L-Acoustics AVDECC Documentation: Opens relevant documentation files
	// - Install WinPCAP Developer Pack: Shows installation instructions for Windows dependencies
	//
	// ASIO Audio Listener Tasks:
	// - Setup ASIO Development Environment: Automated setup of Visual Studio, ASIO SDK, and Npcap SDK
	// - Build ASIO Audio Listener (Full): Builds with full ASIO and PCAP SDK support
	// - Build ASIO Audio Listener (Stub): Builds with stub implementations for development
	// - Test ASIO Audio Listener: Runs the ASIO listener with stub drivers
	// - Open ASIO Documentation: Opens ASIO listener setup and usage documentation
	"tasks": [
		{
			"label": "Build All (Windows - CMake)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build All (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"all"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Install WSL Ubuntu (Required for Linux builds)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"--install",
				"-d",
				"Ubuntu"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "new"
			}
		},
		{
			"label": "Clean All (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"clean"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Clean All (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"clean"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "CMake Configure (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"..",
				"-G",
				"Visual Studio 17 2022"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Create Build Directory"
		},
		{
			"label": "CMake Configure (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"..",
				"-G",
				"Unix Makefiles"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "Create Build Directory"
		},
		{
			"label": "CMake Build (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "CMake Build (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Linux/WSL)"
		},
		{
			"label": "CMake Test (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"RUN_TESTS"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Build (Windows)"
		},
		{
			"label": "CMake Test (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"test"
			],
			"options": {
				"cwd": "${workspaceFolder}/build",
				"env": {
					"ARGS": "--output-on-failure"
				}
			},
			"group": "test",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Build (Linux/WSL)"
		},
		{
			"label": "Build Performance Tests (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"phase2_baseline_measurement"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Run Performance Baseline Test (Windows)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"if (!(Test-Path .\\docs\\tests\\results)) { New-Item -ItemType Directory -Path .\\docs\\tests\\results | Out-Null }; & .\\build\\testing\\performance\\Release\\phase2_baseline_measurement.exe -all-supported-adapters 2>&1 | Tee-Object -FilePath .\\docs\\tests\\results\\phase2_baseline_measurement.log"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": "Build Performance Tests (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "dedicated"
			}
		},
		{
			"label": "Run Performance Baseline Test (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"./build/testing/performance/phase2_baseline_measurement"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "test",
			"isBackground": false,
			"dependsOn": "Build All (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "dedicated"
			}
		},
		{
			"label": "Build Daemons (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"daemons_all"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build Examples (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"examples_all"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build AVTP Pipeline (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"avtp_pipeline"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build AVTP AVDECC (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"avtp_avdecc"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build Libraries (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"lib"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build ATL Library (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"atl_lib"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build Simple Talker (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"simple_talker"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build Simple Listener (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"simple_listener"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Build MRP Client (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"mrp_client"
			],
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false
		},
		{
			"label": "Create Build Directory",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"if (!(Test-Path 'build')) { New-Item -ItemType Directory -Path 'build' }"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Generate AVTP Pipeline Documentation (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"avtp_pipeline_doc"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Generate AVTP AVDECC Documentation (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"make",
				"avtp_avdecc_doc"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Initialize Git Submodules",
			"type": "shell",
			"command": "git",
			"args": [
				"submodule",
				"update",
				"--init",
				"--recursive"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Build All Debug (Windows - CMake)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build All RelWithDebInfo (Windows - CMake)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"RelWithDebInfo"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Build Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "CMake Build RelWithDebInfo (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"RelWithDebInfo"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Clean Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"clean"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "Clean RelWithDebInfo (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"RelWithDebInfo",
				"--target",
				"clean"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false
		},
		{
			"label": "CMake Test Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"RUN_TESTS"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Build Debug (Windows)"
		},
		{
			"label": "CMake Test RelWithDebInfo (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"RelWithDebInfo",
				"--target",
				"RUN_TESTS"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Build RelWithDebInfo (Windows)"
		},
		{
			"label": "Build MAAP Daemon Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_daemon"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Build MRPD Daemon Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"mrpd"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Build CppUTest Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"CppUTest"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Run CppUTest Tests Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"CppUTestTests"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "Build CppUTest Debug (Windows)"
		},
		{
			"label": "Build and Run MRPD Simple Test Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"mrpd_simple_test"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Build MAAP Test Debug (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_test"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)"
		},
		{
			"label": "Run Intel HAL Validation Test (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"intel_hal_validation_test_consolidated"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run Intel HAL Validation Test (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"--build",
				".",
				"--target",
				"intel_hal_validation_test_consolidated"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Test Modernized Windows Code",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_daemon"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Apply gPTP Windows Build Fix [LEGACY]",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '✅ gPTP Windows build fix is no longer needed!' -ForegroundColor Green; Write-Host 'The fix has been applied to the gPTP submodule and committed.' -ForegroundColor Yellow; Write-Host 'This task is kept for reference only.' -ForegroundColor Gray"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Run gPTP Daemon (Windows)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				"run_gptp.ps1"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": true,
			"dependsOn": "Build All (Windows - CMake)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "dedicated"
			}
		},
		{
			"label": "Run gPTP Daemon (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"bash",
				"run_gptp.sh"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": true,
			"dependsOn": "Build All (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "dedicated"
			}
		},
		{
			"label": "Verify gPTP Integration",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				"verify_gptp_integration.ps1"
			],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Build gPTP Only (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"gptp2"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build gPTP Only (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"--build",
				".",
				"--target",
				"gptp2"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with gPTP (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"..",
				"-G",
				"Visual Studio 17 2022",
				"-DOPENAVNU_BUILD_GPTP=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with gPTP (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"..",
				"-G",
				"Unix Makefiles",
				"-DOPENAVNU_BUILD_GPTP=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Open gPTP Documentation",
			"type": "shell",
			"command": "code",
			"args": [
				"docs/gPTP_Integration.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Open gPTP Windows Build Fix Guide",
			"type": "shell",
			"command": "code",
			"args": [
				"gptp_windows_build_fix.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Test Modernized Windows Code",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_daemon"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with L-Acoustics AVDECC (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"..",
				"-G",
				"Visual Studio 17 2022",
				"-DOPENAVNU_BUILD_LA_AVDECC=ON",
				"-DOPENAVNU_BUILD_GPTP=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "CMake Configure with L-Acoustics AVDECC (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"..",
				"-G",
				"Unix Makefiles",
				"-DOPENAVNU_BUILD_LA_AVDECC=ON",
				"-DOPENAVNU_BUILD_GPTP=ON"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "Create Build Directory",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build L-Acoustics AVDECC Only (Windows)",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"la_avdecc_cxx"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure with L-Acoustics AVDECC (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build L-Acoustics AVDECC Only (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"cmake",
				"--build",
				".",
				"--target",
				"la_avdecc_cxx"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$gcc"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure with L-Acoustics AVDECC (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Run L-Acoustics AVDECC Integration Example (Windows)",
			"type": "shell",
			"command": ".\\build\\examples\\Release\\la_avdecc_integration_example.exe",
			"args": [],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Build All (Windows - CMake)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run L-Acoustics AVDECC Integration Example (Linux/WSL)",
			"type": "shell",
			"command": "wsl",
			"args": [
				"./build/examples/la_avdecc_integration_example"
			],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"dependsOn": "Build All (Linux/WSL)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Open L-Acoustics AVDECC Integration Status",
			"type": "shell",
			"command": "code",
			"args": [
				"LA_AVDECC_INTEGRATION_STATUS.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Open L-Acoustics AVDECC Integration Plan",
			"type": "shell",
			"command": "code",
			"args": [
				"LA_AVDECC_SUBMODULE_INTEGRATION_PLAN.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Open AVDECC Compatibility Assessment",
			"type": "shell",
			"command": "code",
			"args": [
				"AVDECC_COMPATIBILITY_ASSESSMENT.md"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "never",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Install Npcap SDK (Windows - Recommended)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '📦 Modern Npcap SDK Installation (Recommended for Windows 10/11)' -ForegroundColor Green; Write-Host ''; Write-Host '1. Download Npcap SDK 1.13:' -ForegroundColor White; Write-Host '   https://npcap.com/dist/npcap-sdk-1.13.zip' -ForegroundColor Cyan; Write-Host ''; Write-Host '2. Extract to a folder (e.g., C:\\\\npcap-sdk)' -ForegroundColor White; Write-Host ''; Write-Host '3. Set environment variable:' -ForegroundColor White; Write-Host '   $env:NPCAP_DIR=\\\"C:\\\\npcap-sdk\\\"' -ForegroundColor Cyan; Write-Host '   OR $env:NPCAP_SDK_DIR=\\\"C:\\\\npcap-sdk\\\"' -ForegroundColor Cyan; Write-Host ''; Write-Host '4. Restart VS Code and run CMake configuration' -ForegroundColor White; Write-Host ''; Write-Host 'Benefits: Modern, actively maintained, Windows 10/11 optimized' -ForegroundColor Green; Write-Host 'OpenAvnu will automatically detect and configure PCAP for all components' -ForegroundColor Green"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Install WinPCAP Developer Pack (Windows - Legacy Fallback)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '⚠️  Legacy WinPCAP Developer Pack Installation (Fallback Only)' -ForegroundColor Yellow; Write-Host ''; Write-Host 'NOTE: WinPcap is deprecated. Use Npcap instead for modern Windows.' -ForegroundColor Red; Write-Host ''; Write-Host '1. Download WinPCAP Developer Pack 4.1.2:' -ForegroundColor White; Write-Host '   https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip' -ForegroundColor Cyan; Write-Host ''; Write-Host '2. Extract to a folder (e.g., C:\\\\WpdPack)' -ForegroundColor White; Write-Host ''; Write-Host '3. Set environment variable:' -ForegroundColor White; Write-Host '   $env:WPCAP_DIR=\\\"C:\\\\WpdPack\\\"' -ForegroundColor Cyan; Write-Host ''; Write-Host '4. Restart VS Code and run CMake configuration' -ForegroundColor White; Write-Host ''; Write-Host 'OpenAvnu will automatically create compatibility layer' -ForegroundColor Yellow"
			],
			"group": "build",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Test Modernized Windows Code",
			"type": "shell",
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Debug",
				"--target",
				"maap_daemon"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "test",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Build ASIO Audio Listener (CMake)",
			"type": "shell", 
			"command": "cmake",
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"simple_asio_listener"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Build ASIO Audio Listener (Full CMake)",
			"type": "shell",
			"command": "cmake", 
			"args": [
				"--build",
				".",
				"--config",
				"Release",
				"--target",
				"asio_listener"
			],
			"options": {
				"cwd": "${workspaceFolder}/build"
			},
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			],
			"isBackground": false,
			"dependsOn": "CMake Configure (Windows)",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Test ASIO Audio Listener",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				"test_asio_listener.ps1"
			],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "shared"
			}
		},
		{
			"label": "Run DAW02 Windows Test Suite",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy", "Bypass",
				"-File",
				"${workspaceFolder}/testing/integration/daemons_phase2_windows_build_verification/run_daw02_tests.ps1"
			],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "DAW02 Build Verification Only",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy", "Bypass",
				"-File",
				"${workspaceFolder}/testing/integration/daemons_phase2_windows_build_verification/test_01_build_verification.ps1"
			],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "DAW02 Intel HAL Detection Only",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy", "Bypass",
				"-File",
				"${workspaceFolder}/testing/integration/daemons_phase2_windows_build_verification/test_02_intel_hal_detection.ps1"
			],
			"group": "test",
			"problemMatcher": [],
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Start OpenAvnu Daemons (Multi-Adapter)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				"start_openavnu_final.ps1"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "test",
			"isBackground": true,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": false
			},
			"problemMatcher": []
		},
		{
			"label": "Start OpenAvnu Daemons (I219 Specific)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				"start_openavnu_corrected.ps1"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "test",
			"isBackground": true,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared",
				"showReuseMessage": true,
				"clear": false
			},
			"problemMatcher": []
		},
	{
		"label": "Stop OpenAvnu Daemons",
		"type": "shell",
		"command": "powershell",
		"args": [
			"-ExecutionPolicy",
			"Bypass",
			"-File",
			"stop_openavnu_daemons.ps1"
		],
		"group": "test",
		"isBackground": false,
		"presentation": {
			"echo": true,
			"reveal": "always",
			"focus": true,
			"panel": "shared"
		},
		"problemMatcher": []
	},
	{
		"label": "Test ASIO Listener with Auto-Daemon Startup (Multi-Adapter)",
		"type": "shell",
		"command": "powershell",
		"args": [
			"-ExecutionPolicy",
			"Bypass",
			"-File",
			"test_asio_multiadapter_clean.ps1"
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"group": "test",
		"isBackground": false,
		"dependsOn": [],
		"presentation": {
			"echo": true,
			"reveal": "always",
			"focus": true,
			"panel": "dedicated"
		},
		"problemMatcher": []
	},
	{
		"label": "Test ASIO Listener with Auto-Daemon Startup (I219)",
		"type": "shell",
		"command": "powershell",
		"args": [
			"-ExecutionPolicy",
			"Bypass",
			"-File",
			"test_asio_i219.ps1"
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"group": "test",
		"isBackground": false,
		"dependsOn": [],
		"presentation": {
			"echo": true,
			"reveal": "always",
			"focus": true,
			"panel": "dedicated"
		},
		"problemMatcher": []
	},
		{
			"label": "Build and Test ASIO Listener (Complete Workflow)",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				"test_asio_listener_complete.ps1"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "test",
			"isBackground": false,
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "dedicated"
			},
			"problemMatcher": []
		},
	{
		"label": "Debug ASIO Listener with Daemon Logs",
		"type": "shell",
		"command": "powershell",
		"args": [
			"-ExecutionPolicy",
			"Bypass",
			"-File",
			"debug_asio_integration.ps1",
			"-DetailedLogging"
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"group": "test",
		"isBackground": false,
		"presentation": {
			"echo": true,
				"reveal": "always",
				"focus": true,
				"panel": "dedicated"
		},
		"problemMatcher": []
	},
	{
		"label": "Monitor Daemon Performance during ASIO Test",
		"type": "shell",
		"command": "powershell",
		"args": [
			"-ExecutionPolicy",
			"Bypass",
			"-File",
			"debug_asio_integration.ps1",
			"-ContinuousMonitoring",
			"-MonitorDuration",
			"30"
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"group": "test",
		"isBackground": false,
		"presentation": {
			"echo": true,
			"reveal": "always",
			"focus": true,
			"panel": "dedicated"
		},
		"problemMatcher": []
	},
	{
		"label": "Verify ASIO Integration Environment",
		"type": "shell",
		"command": "powershell",
		"args": [
			"-ExecutionPolicy",
			"Bypass",
			"-File",
			"verify_asio_environment.ps1"
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"group": "test",
		"isBackground": false,
		"presentation": {
			"echo": true,
			"reveal": "always",
			"focus": true,
			"panel": "dedicated"
		},
		"problemMatcher": []
	},
	{
		"label": "Compile and Test ASIO Listener (Simple)",
		"type": "shell",
		"command": "powershell",
		"args": [
			"-ExecutionPolicy",
			"Bypass",
			"-Command",
			"cd examples\\asio-listener; if (Test-Path 'simple_asio_listener.c') { Write-Host 'Compiling ASIO Listener...' -ForegroundColor Cyan; gcc -o asio_listener.exe simple_asio_listener.c -lws2_32; if (Test-Path 'asio_listener.exe') { Write-Host 'Build successful! Starting...' -ForegroundColor Green; & '.\\asio_listener.exe' } else { Write-Host 'Build failed - install MinGW-w64' -ForegroundColor Red } } else { Write-Host 'Source file not found' -ForegroundColor Red }"
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"group": "test",
		"isBackground": false,
		"dependsOn": "Start OpenAvnu Daemons (Multi-Adapter)",
		"presentation": {
			"echo": true,
			"reveal": "always",
			"focus": true,
			"panel": "dedicated"
		},
		"problemMatcher": []
	},
	{
		"label": "Full ASIO Test Workflow (No Build Dependencies)",
		"type": "shell",
		"command": "powershell",
		"args": [
			"-ExecutionPolicy",
			"Bypass",
			"-Command",
			"Write-Host 'Starting complete ASIO test workflow...' -ForegroundColor Magenta; & '.\\examples\\asio-listener\\start_openavnu_final.ps1'; Write-Host 'Daemons started, testing ASIO listener...' -ForegroundColor Cyan; cd examples\\asio-listener; Write-Host 'ASIO Listener Test (Stub Mode)' -ForegroundColor Green; Write-Host 'Listening for AVB streams on your Intel I219...' -ForegroundColor White; Write-Host 'This is a simulation - press Ctrl+C to stop' -ForegroundColor Yellow; pause"
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"group": "test",
		"isBackground": false,
		"presentation": {
			"echo": true,
			"reveal": "always",
			"focus": true,
			"panel": "dedicated"
		},
		"problemMatcher": []
	}
	]
}
