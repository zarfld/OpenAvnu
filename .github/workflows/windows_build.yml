name: Windows Build CI

on:
  push:
    branches:
      - main
      - master
      - open-avb-next
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      NPCAP_SDK_DIR: "C:\\npcap-sdk"
      # Add legacy compatibility for components that expect WPCAP_DIR
      WPCAP_DIR: "C:\\npcap-sdk"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Fix submodule URLs and initialize
        run: |
          Write-Host "Configuring submodule URLs..."
          git config --file .gitmodules submodule.avdecc-lib.url https://github.com/AVnu/avdecc-lib.git
          git config --file .gitmodules submodule.lib/atl_avb.url https://github.com/zarfld/atl_avb.git
          git config --file .gitmodules submodule.lib/igb_avb.url https://github.com/AVnu/igb_avb.git
          git config --file .gitmodules submodule.thirdparty/cpputest.url https://github.com/cpputest/cpputest.git
          
          Write-Host "Syncing submodule configurations..."
          git submodule sync
          
          Write-Host "Initializing and updating submodules..."
          git submodule update --init --recursive
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Submodule initialization failed"
            exit 1
          }
          
          Write-Host "Verifying critical submodules..."
          Write-Host "=== Submodule Status ==="
          git submodule status
          
          Write-Host "=== Checking for avdecc-lib ==="
          if (Test-Path "avdecc-lib") {
            Write-Host "SUCCESS: avdecc-lib found"
            Write-Host "avdecc-lib contents:"
            Get-ChildItem "avdecc-lib" | Select-Object -First 5 | Format-Table Name, Length
          } else {
            Write-Host "ERROR: avdecc-lib submodule missing"
            Write-Host "Available directories:"
            Get-ChildItem -Directory | Select-Object Name
            exit 1
          }
          
          Write-Host "=== Checking for lib/la_avdecc ==="
          if (Test-Path "lib/la_avdecc") {
            Write-Host "SUCCESS: lib/la_avdecc found"
            Write-Host "la_avdecc contents:"
            Get-ChildItem "lib/la_avdecc" | Select-Object -First 5 | Format-Table Name, Length
          } else {
            Write-Host "ERROR: lib/la_avdecc submodule missing"
            exit 1
          }
          
          Write-Host "=== Checking for thirdparty/intel-ethernet-hal ==="
          if (Test-Path "thirdparty/intel-ethernet-hal") {
            Write-Host "SUCCESS: thirdparty/intel-ethernet-hal found"
          } else {
            Write-Host "WARNING: thirdparty/intel-ethernet-hal missing"
          }
          
          Write-Host "Submodule initialization completed"
        shell: powershell

      - name: Download and install Npcap SDK (modern WinPcap replacement)
        run: |
          # Download Npcap SDK (modern replacement for deprecated WinPcap)
          Write-Host "Downloading Npcap SDK 1.13..."
          Invoke-WebRequest -Uri "https://npcap.com/dist/npcap-sdk-1.13.zip" -OutFile "npcap-sdk.zip"
          
          Write-Host "Extracting Npcap SDK..."
          Expand-Archive npcap-sdk.zip -DestinationPath "C:\npcap-temp"
          
          # The archive may contain a nested directory structure - find and move the actual SDK
          $extractedDirs = Get-ChildItem "C:\npcap-temp" -Directory
          if ($extractedDirs.Count -eq 1) {
            # Single directory extracted - this is likely the SDK root
            Write-Host "Found SDK in nested directory: $($extractedDirs[0].Name)"
            Move-Item $extractedDirs[0].FullName "C:\npcap-sdk"
            Remove-Item "C:\npcap-temp" -Force -Recurse
          } else {
            # Multiple items or files - the temp directory IS the SDK
            Write-Host "SDK extracted to root directory"
            Move-Item "C:\npcap-temp" "C:\npcap-sdk"
          }
          
          Write-Host "Npcap SDK installation complete"
        shell: powershell

      - name: Verify Npcap SDK structure and environment
        run: |
          Write-Host "Environment Variables:"
          Write-Host "NPCAP_SDK_DIR: $env:NPCAP_SDK_DIR"
          Write-Host "WPCAP_DIR: $env:WPCAP_DIR"
          Write-Host ""
          Write-Host "Npcap SDK Structure:"
          if (Test-Path "C:\npcap-sdk") {
            Get-ChildItem "C:\npcap-sdk" | Format-Table Name, Length, LastWriteTime
            if (Test-Path "C:\npcap-sdk\Include") {
              Write-Host "Include directory contents:"
              Get-ChildItem "C:\npcap-sdk\Include" | Select-Object Name
            }
            if (Test-Path "C:\npcap-sdk\Lib") {
              Write-Host "Lib directory contents:"
              Get-ChildItem "C:\npcap-sdk\Lib" -Recurse | Select-Object FullName
            }
          } else {
            Write-Host "ERROR: Npcap SDK directory not found!"
            exit 1
          }
        shell: powershell

      - name: Create build directory
        run: |
          Write-Host "Creating build directory..."
          if (!(Test-Path "build")) {
            New-Item -ItemType Directory -Path "build"
            Write-Host "Build directory created"
          } else {
            Write-Host "Build directory already exists"
          }
        shell: powershell

      - name: Check and upgrade CMake if needed
        run: |
          Write-Host "Checking CMake version..."
          $cmakeVersion = cmake --version
          Write-Host "Current CMake version: $cmakeVersion"
          
          # Check if we have CMake 3.29+ (required by LA_AVDECC)
          $versionOutput = cmake --version | Select-String "cmake version (\d+\.\d+)"
          if ($versionOutput) {
            $version = [Version]$versionOutput.Matches[0].Groups[1].Value
            Write-Host "Parsed version: $version"
            
            $requiredVersion = [Version]"3.29"
            if ($version -lt $requiredVersion) {
              Write-Host "CMake version $version is too old for LA_AVDECC (requires 3.29+)"
              Write-Host "Installing latest CMake..."
              
              # Download and install latest CMake
              $cmakeUrl = "https://github.com/Kitware/CMake/releases/download/v3.30.3/cmake-3.30.3-windows-x86_64.msi"
              Write-Host "Downloading CMake 3.30.3..."
              Invoke-WebRequest -Uri $cmakeUrl -OutFile "cmake-installer.msi"
              
              Write-Host "Installing CMake..."
              Start-Process msiexec.exe -ArgumentList "/i cmake-installer.msi /quiet /norestart" -Wait
              
              # Update PATH
              $env:PATH = "C:\Program Files\CMake\bin;$env:PATH"
              Write-Host "Updated PATH with new CMake"
              
              # Verify new version
              $newVersion = cmake --version
              Write-Host "New CMake version: $newVersion"
            } else {
              Write-Host "CMake version is sufficient for LA_AVDECC"
            }
            
            # Test CMake with a 3.29+ feature to verify it works
            Write-Host "Testing CMake 3.29+ compatibility with simple project..."
            
            # Create a simple test CMakeLists.txt that requires 3.29
            New-Item -ItemType Directory -Path "cmake_test_temp" -Force | Out-Null
            'cmake_minimum_required(VERSION 3.29)' | Out-File -FilePath "cmake_test_temp/CMakeLists.txt" -Force
            'project(CMakeTest)' | Add-Content -Path "cmake_test_temp/CMakeLists.txt"
            'message(STATUS "CMake 3.29+ test successful")' | Add-Content -Path "cmake_test_temp/CMakeLists.txt"
            
            Write-Host "Attempting CMake test configuration..."
            cmake -S cmake_test_temp -B cmake_test_temp/build -G "Visual Studio 17 2022" -A x64 2>&1 | Tee-Object -Variable cmakeTestOutput
            $testResult = $LASTEXITCODE
            
            Write-Host "CMake test output:"
            $cmakeTestOutput | ForEach-Object { Write-Host "  $_" }
            
            Remove-Item -Recurse -Force "cmake_test_temp" -ErrorAction SilentlyContinue
            
            if ($testResult -eq 0) {
              Write-Host "SUCCESS: CMake 3.29+ compatibility verified"
            } else {
              Write-Host "WARNING: CMake 3.29+ test failed, but continuing anyway..."
              Write-Host "This might indicate Visual Studio components missing, but CMake version should be OK"
              Write-Host "Main configuration will provide more detailed error information if needed"
            }
          }
        shell: powershell

      - name: Pre-flight system validation
        run: |
          Write-Host "=== PRE-FLIGHT SYSTEM VALIDATION ==="
          Write-Host ""
          
          # Test basic PowerShell functionality
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)"
          Write-Host "Execution policy: $(Get-ExecutionPolicy)"
          
          # Test CMake basic functionality
          Write-Host ""
          Write-Host "Testing CMake basic functionality..."
          try {
            $cmakeHelp = cmake --help 2>&1
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ CMake basic command works"
              $cmakeVersion = cmake --version 2>&1
              Write-Host "CMake version: $cmakeVersion"
            } else {
              Write-Host "❌ CMake basic command failed"
              Write-Host "Output: $cmakeHelp"
            }
          } catch {
            Write-Host "❌ CMake command threw exception: $_"
          }
          
          # Test Visual Studio detection
          Write-Host ""
          Write-Host "Testing Visual Studio detection..."
          $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (Test-Path $vsWhere) {
            Write-Host "✅ vswhere.exe found"
            try {
              $vsInstances = & $vsWhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
              if ($vsInstances) {
                Write-Host "✅ Visual Studio with C++ tools found: $vsInstances"
              } else {
                Write-Host "❌ No Visual Studio with C++ tools found"
              }
            } catch {
              Write-Host "❌ vswhere execution failed: $_"
            }
          } else {
            Write-Host "❌ vswhere.exe not found"
          }
          
          # Test environment variables
          Write-Host ""
          Write-Host "Environment variables:"
          Write-Host "NPCAP_SDK_DIR: '$env:NPCAP_SDK_DIR'"
          Write-Host "WPCAP_DIR: '$env:WPCAP_DIR'"
          Write-Host "PATH (CMake entries): $(($env:PATH -split ';' | Where-Object { $_ -like '*cmake*' }) -join '; ')"
          
          # Test basic CMake generation
          Write-Host ""
          Write-Host "Testing basic CMake generation capability..."
          try {
            New-Item -ItemType Directory -Path "test_cmake_gen" -Force | Out-Null
            'cmake_minimum_required(VERSION 3.20)' | Out-File -FilePath "test_cmake_gen/CMakeLists.txt" -Force
            'project(TestGen)' | Add-Content -Path "test_cmake_gen/CMakeLists.txt"
            'message(STATUS "Basic test successful")' | Add-Content -Path "test_cmake_gen/CMakeLists.txt"
            
            Write-Host "Attempting basic CMake generation test..."
            $genOutput = cmake -S test_cmake_gen -B test_cmake_gen/build -G "Visual Studio 17 2022" -A x64 2>&1
            $genResult = $LASTEXITCODE
            
            Write-Host "Generation test result: $genResult"
            if ($genResult -eq 0) {
              Write-Host "✅ Basic CMake generation works"
            } else {
              Write-Host "❌ Basic CMake generation failed"
              Write-Host "Output: $genOutput"
            }
            
            Remove-Item -Recurse -Force "test_cmake_gen" -ErrorAction SilentlyContinue
          } catch {
            Write-Host "❌ CMake generation test threw exception: $_"
          }
          
          Write-Host ""
          Write-Host "=== PRE-FLIGHT VALIDATION COMPLETE ==="
        shell: powershell

      - name: Configure project with fixed LA_AVDECC compatibility
        run: |
          Write-Host "=== STARTING CMAKE CONFIGURATION ==="
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem | Select-Object -First 10 | Format-Table Name, Length
          
          # Verify we have CMakeLists.txt
          if (Test-Path "CMakeLists.txt") {
            Write-Host "✅ CMakeLists.txt found"
          } else {
            Write-Host "❌ CMakeLists.txt not found!"
            exit 1
          }
          
          # Simple CMake configuration attempt first
          Write-Host ""
          Write-Host "Attempting basic CMake configuration..."
          
          $cmakeArgs = @(
            "-S", "."
            "-B", "build"
            "-G", "Visual Studio 17 2022"
            "-A", "x64"
          )
          
          Write-Host "CMake command: cmake $($cmakeArgs -join ' ')"
          
          try {
            $basicOutput = & cmake @cmakeArgs 2>&1
            $basicResult = $LASTEXITCODE
            
            Write-Host "Basic CMake result: $basicResult"
            
            if ($basicResult -eq 0) {
              Write-Host "✅ Basic CMake configuration successful!"
              Write-Host "Now attempting full configuration with OpenAvnu options..."
              
              # Full configuration with all options
              $fullArgs = $cmakeArgs + @(
                "-DOPENAVNU_BUILD_UNIFIED_TESTING=ON",
                "-DOPENAVNU_BUILD_LEGACY_TESTS=ON",
                "-DOPENAVNU_BUILD_INTEL_HAL=ON",
                "-DOPENAVNU_BUILD_EXAMPLES=ON",
                "-DOPENAVNU_BUILD_LA_AVDECC=ON",
                "-DOPENAVNU_BUILD_AVDECC_ENTITIES=ON",
                "-DOPENAVNU_BUILD_GPTP=ON",
                "-DOPENAVNU_BUILD_MAAP=ON",
                "-DOPENAVNU_BUILD_MRPD=ON",
                "-DOPENAVNU_BUILD_SHAPER=ON",
                "-DOPENAVNU_BUILD_AVTP_PIPELINE=ON",
                "-DCMAKE_BUILD_TYPE=Release"
              )
              
              Write-Host "Full CMake command: cmake $($fullArgs -join ' ')"
              $fullOutput = & cmake @fullArgs 2>&1
              $fullResult = $LASTEXITCODE
              
              Write-Host "Full CMake result: $fullResult"
              
              if ($fullResult -eq 0) {
                Write-Host "✅ SUCCESS: Full OpenAvnu configuration completed!"
              } else {
                Write-Host "❌ Full configuration failed, showing output:"
                $fullOutput | ForEach-Object { Write-Host "FULL: $_" }
                exit 1
              }
              
            } else {
              Write-Host "❌ Basic CMake configuration failed, showing output:"
              $basicOutput | ForEach-Object { Write-Host "BASIC: $_" }
              exit 1
            }
            
          } catch {
            Write-Host "❌ CMake execution threw exception: $_"
            exit 1
          }
          
          Write-Host "=== CMAKE CONFIGURATION COMPLETE ==="
        shell: powershell

      - name: Build project (full OpenAvnu feature set)
        run: |
          Write-Host "Starting comprehensive build process..."
          Write-Host "Building all OpenAvnu components..."
          
          # Build all components
          cmake --build build --config Release
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Build failed with exit code $LASTEXITCODE"
            exit 1
          }
          
          Write-Host "Build completed successfully"
        shell: powershell

      - name: Verify build artifacts
        run: |
          echo "Checking comprehensive build artifacts..."
          
          Write-Host "=== Checking AVDECC Entities ==="
          if (Test-Path "build\lib\avdecc-entities\Release\avdecc_entity_responsive.exe") {
            echo "SUCCESS: Primary AVDECC entity built successfully"
            dir "build\lib\avdecc-entities\Release\avdecc_entity_responsive.exe"
          } else {
            echo "ERROR: Primary AVDECC entity not found"
            echo "Available files in avdecc-entities:"
            if (Test-Path "build\lib\avdecc-entities") {
              Get-ChildItem "build\lib\avdecc-entities" -Recurse -Name
            }
          }
          
          if (Test-Path "build\lib\avdecc-entities\Release\avdecc_entity_hive_compatible.exe") {
            echo "SUCCESS: Hive-compatible AVDECC entity built successfully"
            dir "build\lib\avdecc-entities\Release\avdecc_entity_hive_compatible.exe"
          } else {
            echo "ERROR: Hive-compatible AVDECC entity not found"
            echo "Available files in avdecc-entities:"
            if (Test-Path "build\lib\avdecc-entities") {
              Get-ChildItem "build\lib\avdecc-entities" -Recurse -Name
            }
          }
          
          Write-Host "=== Checking Other Components ==="
          Write-Host "Built executables across entire project:"
          Get-ChildItem "build" -Recurse -Filter "*.exe" | Select-Object FullName, Length
          
          Write-Host "Built libraries across entire project:"
          Get-ChildItem "build" -Recurse -Filter "*.lib" | Select-Object FullName, Length | Select-Object -First 10
          
          echo "Comprehensive build verification completed"
        shell: powershell

      - name: Run comprehensive smoke tests
        run: |
          echo "Running comprehensive functionality tests..."
          
          Write-Host "=== Testing AVDECC Entities ==="
          if (Test-Path "build\lib\avdecc-entities\Release\avdecc_entity_responsive.exe") {
            Write-Host "Testing responsive entity (quick help test):"
            & "build\lib\avdecc-entities\Release\avdecc_entity_responsive.exe" --help 2>&1 | Write-Host
          }
          
          if (Test-Path "build\lib\avdecc-entities\Release\avdecc_entity_hive_compatible.exe") {
            Write-Host "Testing hive-compatible entity (quick help test):"
            & "build\lib\avdecc-entities\Release\avdecc_entity_hive_compatible.exe" --help 2>&1 | Write-Host
          }
          
          Write-Host "=== Hardware-dependent tests ==="
          echo "Skipped hardware-dependent tests in CI environment"
          
          echo "Comprehensive build verification completed successfully"
        shell: powershell
