name: Manual Test on DAW02

on:
  workflow_dispatch:
    inputs:
      test_phase:
        description: 'Test phase to run (1, 2, 3, 4, 5, or all)'
        required: false
        default: 'all'
        type: choice
        options:
        - '1'
        - '2' 
        - '3'
        - '4'
        - '5'
        - 'all'
      adapter_filter:
        description: 'Filter to specific adapter (I210, I219, I225, I226, or leave empty for all)'
        required: false
        default: ''
        type: string
      verbose_output:
        description: 'Enable verbose output'
        required: false
        default: true
        type: boolean
      run_intel_hal_test:
        description: 'Run Intel HAL hardware validation test'
        required: false
        default: true
        type: boolean

jobs:
  build-and-hwtest:
    runs-on: [self-hosted, DAW02]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build (Release)
        run: cmake --build build --config Release

      - name: Run Integration & Unit Tests
        run: cmake --build build --config Release --target RUN_TESTS
        continue-on-error: true

      - name: Intel HAL Hardware Validation Test
        if: ${{ github.event.inputs.run_intel_hal_test == 'true' }}
        shell: pwsh
        run: |
          Write-Host "=== Intel HAL Hardware Validation Test ===" -ForegroundColor Green
          $testExe = "build/tests/intel_hal_validation_test.exe"
          
          if (Test-Path $testExe) {
            Write-Host "Running Intel HAL validation test..." -ForegroundColor Yellow
            
            # Run the test and capture output
            $result = & $testExe 2>&1
            $exitCode = $LASTEXITCODE
            
            # Display results
            Write-Host $result
            
            # Save results to file
            $resultsDir = "docs/tests/results"
            New-Item -ItemType Directory -Path $resultsDir -Force | Out-Null
            $resultFile = "$resultsDir/intel_hal_validation_${{ github.run_id }}.log"
            
            $logContent = @"
          Intel HAL Hardware Validation Test Results
          ==========================================
          Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          GitHub Run ID: ${{ github.run_id }}
          Exit Code: $exitCode
          
          Test Output:
          $result
          "@
            
            $logContent | Out-File -FilePath $resultFile -Encoding UTF8
            
            if ($exitCode -eq 0) {
              Write-Host "‚úÖ Intel HAL validation test PASSED" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Intel HAL validation test FAILED (exit code: $exitCode)" -ForegroundColor Red
            }
            
            Write-Host "Results saved to: $resultFile" -ForegroundColor Cyan
          } else {
            Write-Host "‚ùå Intel HAL validation test not found at: $testExe" -ForegroundColor Red
            Write-Host "Make sure the test was built successfully" -ForegroundColor Yellow
          }
        continue-on-error: true

      - name: Unified Hardware Testing Framework
        shell: pwsh
        run: |
          $params = @("-Phase", "${{ github.event.inputs.test_phase }}", "-SaveResults")
          if ("${{ github.event.inputs.adapter_filter }}" -ne "") {
            $params += "-AdapterFilter", "${{ github.event.inputs.adapter_filter }}"
          }
          if ("${{ github.event.inputs.verbose_output }}" -eq "true") {
            $params += "-Verbose"
          }
          ./tests/hardware/unified_test_framework.ps1 @params

      - name: Legacy I225 Register Test (if available)
        shell: pwsh
        run: |
          $i225Present = ./tests/hardware/unified_test_framework.ps1 -ListAdapters | Select-String "I225"
          if ($i225Present -and (Test-Path "./test_i225_register_access.ps1")) {
            Write-Host "Running legacy I225 register test..."
            ./test_i225_register_access.ps1 -Verbose -SaveLog -LogPath "docs/tests/results/i225_register_test_${{ github.run_id }}.log"
          } else {
            Write-Host "I225 test not available, skipping..."
          }
        continue-on-error: true

      - name: Python Timestamp Analysis (if available)
        shell: pwsh
        run: |
          if (Test-Path "tools/timestamp_analysis/timestamp_analyzer.py") {
            python tools/timestamp_analysis/timestamp_analyzer.py --duration 60 --output docs/tests/results/timestamp_analysis_${{ github.run_id }}.json
          } else {
            Write-Host "Python timestamp analyzer not found, skipping..."
          }
        continue-on-error: true

      - name: Collect Test Results
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "docs/tests/results" -Force | Out-Null
          
          # Collect CMake test results
          if (Test-Path "build/Testing/Temporary/LastTest.log") {
            Copy-Item "build/Testing/Temporary/LastTest.log" "docs/tests/results/cmake_tests_${{ github.run_id }}.log"
          }
          
          # Collect CTest XML results
          if (Test-Path "build/Testing/*/Test.xml") {
            Copy-Item "build/Testing/*/Test.xml" "docs/tests/results/" -Force
          }
          
          # Intel HAL validation results are already saved by the test step
          
          Write-Host "Collected test results:"
          Get-ChildItem "docs/tests/results/" -Filter "*${{ github.run_id }}*" | ForEach-Object {
            Write-Host "  $($_.Name) ($([math]::Round($_.Length / 1KB, 2)) KB)"
          }
          
          # Summary of Intel HAL test results
          $halResults = Get-ChildItem "docs/tests/results/" -Filter "intel_hal_validation_${{ github.run_id }}.log"
          if ($halResults) {
            Write-Host ""
            Write-Host "Intel HAL Validation Test Summary:" -ForegroundColor Green
            $content = Get-Content $halResults.FullName | Select-String "Exit Code|Test.*:" 
            $content | ForEach-Object { Write-Host "  $_" }
          }

      - name: Update Machine Documentation
        shell: pwsh
        run: |
          $machineFile = "docs/machine/windows_test_system_DAW02.md"
          $updateInfo = "`n`n## Last Test Run`n- Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n- Run ID: ${{ github.run_id }}`n"
          Add-Content -Path $machineFile -Value $updateInfo
          Write-Host "Updated machine documentation"

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-daw02-${{ github.run_id }}
          path: |
            docs/tests/results/
            docs/machine/windows_test_system_DAW02.md
          retention-days: 30

      - name: Clock Quality and gPTP Conformance Tests
        shell: pwsh
        run: |
          Write-Host "=== Clock Quality and gPTP Conformance Tests ===" -ForegroundColor Green
          $testExe = "build/test/clock_quality/Release/clock_quality_tests.exe"
          
          if (Test-Path $testExe) {
            Write-Host "Running clock quality and gPTP conformance tests..." -ForegroundColor Yellow
            
            # Run the test and capture output
            $result = & $testExe 2>&1
            $exitCode = $LASTEXITCODE
            
            # Display results
            Write-Host $result
            
            # Save results to file
            $resultsDir = "docs/tests/results"
            New-Item -ItemType Directory -Path $resultsDir -Force | Out-Null
            $resultFile = "$resultsDir/clock_quality_tests_${{ github.run_id }}.log"
            
            $logContent = @"
          Clock Quality and gPTP Conformance Test Results
          ===============================================
          Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          GitHub Run ID: ${{ github.run_id }}
          Exit Code: $exitCode
          
          Test Output:
          $result
          "@
            
            $logContent | Out-File -FilePath $resultFile -Encoding UTF8
            
            if ($exitCode -eq 0) {
              Write-Host "‚úÖ Clock Quality and gPTP conformance tests PASSED" -ForegroundColor Green
              # Extract test summary from output
              $passedTests = ($result | Select-String "Passed: (\d+)" | ForEach-Object { $_.Matches[0].Groups[1].Value })
              $totalTests = ($result | Select-String "Total tests: (\d+)" | ForEach-Object { $_.Matches[0].Groups[1].Value })
              if ($passedTests -and $totalTests) {
                Write-Host "üìä Test Summary: $passedTests/$totalTests tests passed" -ForegroundColor Cyan
              }
            } else {
              Write-Host "‚ùå Clock Quality and gPTP conformance tests FAILED (exit code: $exitCode)" -ForegroundColor Red
            }
            
            Write-Host "Results saved to: $resultFile" -ForegroundColor Cyan
          } else {
            Write-Host "‚ùå Clock Quality tests not found at: $testExe" -ForegroundColor Red
            Write-Host "Make sure the tests were built successfully with -DOPENAVNU_BUILD_CLOCK_QUALITY_TESTS=ON" -ForegroundColor Yellow
          }
        continue-on-error: true
